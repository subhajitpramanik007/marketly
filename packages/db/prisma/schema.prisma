generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ImageOwnerType {
    Consumer
    Vendor
    Product
    Order
    Others
}

enum Role {
    Consumer
    Vendor
    Admin
}

model Image {
    id               String         @id @default(uuid())
    url              String
    file_id          String
    owner_id         String
    owner_type       ImageOwnerType
    other_owner_type String?

    consumers Consumer[]

    vendor_logo   Vendor? @relation("vendor_logo")
    vendor_banner Vendor? @relation("vendor_banner")

    @@unique([owner_type, id])
    @@index([owner_id, owner_type])
    @@map("images")
}

model Account {
    id    String @id @default(uuid())
    email String @unique
    role  Role

    password UserPassword? @relation(fields: [id], references: [user_id])

    created_at DateTime @default(now())

    @@index([email, role])
    @@index([email])
    @@map("accounts")
}

model Consumer {
    id             String  @id @default(uuid())
    first_name     String
    last_name      String?
    email          String  @unique
    phone          String?
    account_id     String  @unique
    email_verified Boolean @default(false)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    avatar_id String?
    avatar    Image?  @relation(fields: [avatar_id], references: [id])

    @@index([account_id])
    @@map("consumers")
}

model UserPassword {
    id      String  @id @default(uuid())
    user_id String  @unique
    hash    String
    salt    String?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    accounts Account[]

    @@map("user_passwords")
}

model Vendor {
    id         String @id @default(uuid())
    store_name String

    store_logo_id   String? @unique
    store_banner_id String? @unique
    store_logo      Image?  @relation("vendor_logo", fields: [store_logo_id], references: [id])
    store_banner    Image?  @relation("vendor_banner", fields: [store_banner_id], references: [id])

    email String   @unique
    phone String[]

    created_by_id String @unique // account id

    staffs               VendorStaff[]
    email_verified       Boolean       @default(false)
    is_verified_by_admin Boolean       @default(false)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("vendors")
}

enum VendorPermission {
    Admin
    Manager
    Staff
}

model VendorStaff {
    id         String @id @default(uuid())
    first_name String
    last_name  String
    email      String @unique
    phone      String

    vendor_id String
    vendor    Vendor @relation(fields: [vendor_id], references: [id])

    permission VendorPermission

    added_by_id String? // account id

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@map("vendor_staffs")
}
model Admin {
  id         String       @id @default(uuid())
  username   String       @unique
  password   String

  staffs     AdminStaff[]

  last_login_at DateTime?
  last_active_at DateTime?

  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  deleted_at DateTime?

  @@map("admins")
}

enum AdminStaffPermission {
  SuperAdmin
  Moderator
  Support
}

model AdminStaff {
  id           String             @id @default(uuid())
  username     String
  password     String

  permission   AdminStaffPermission

  admin_id     String?           
  admin        Admin?             @relation(fields: [admin_id], references: [id])

  added_by_id  String?            
  added_by     AdminStaff?        @relation("AddedBy", fields: [added_by_id], references: [id])
  added_staffs AdminStaff[]       @relation("AddedBy")

  last_login_at DateTime?
  last_active_at DateTime?

  created_at   DateTime           @default(now())
  updated_at   DateTime           @updatedAt
  deleted_at   DateTime?

  @@map("admin_staffs")
}

model Session {
    id            String @id @default(uuid())
    user_id       String
    role          Role
    refresh_token String @unique

    user_agent String?
    ip_address String?
    is_active  Boolean @default(true)

    expires_at DateTime
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@index([user_id, role])
    @@map("sessions")
}
